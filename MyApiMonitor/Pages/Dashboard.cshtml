@page

@model MyApiMonitor.Pages.DashboardModel
@{
}
<head>
    
</head>

<h1>The Whaddon Show Api</h1>

    <p>The Whaddon Show Api is a REST Api providing access to The Whaddon Show's central SQL Database. It is primarily used by the <a href="/Not yet Implemented">The Whaddon Show App</a> as part of its server side data access layer but public access is also available for GET requests. (POST,PUT and DELETE requests require Authentication through Azure AdB2C)</p>
    <h2>Performance & Monitoring</h2>
    <p>The availability and performance of the API is regularly monitored with live results summarised below.<p>
<div class="container">
        <div class="row">
        <div class="col">
            <div class ="row">
                <div class="col">
                        <h4>Reliability</h4>
                </div>
                <div class="col">
                        <a href="/Tests/Results?collectionId=@Model.CollectionId">(get all data)</a>
                </div>
            </div>
            <div class="row">
                    <canvas id="resultsChart"></canvas>
            </div>
            
        </div>
        <div class="col">
            <div class="row">
                <div class="col">
                        <h4>Speed</h4>
                </div>
                <div class="col">
                        <a href="/Tests/Results?collectionId=@Model.CollectionId">(get all data)</a>
                </div>
            </div>
            <div class="row">
                    <canvas id="speedChart"></canvas>
            </div>
            
        </div>
    </div>
    <div class="row">
        <div class="col">
                <div class="row">
                    <div class="col">
                        <h4>Spead and Reliability Breakdown</h4>
                    </div>
                    <div class="col">
                        <a href="/Tests/Results?collectionId=@Model.CollectionId">(get all data)</a>
                    </div>
                </div>
                <div class="row">
                    <canvas id="resultsAndSpeedChart"></canvas>
                </div>
        </div>
        <div class="col">
                <div class="row">
                    <div class="col">
                        <h4>Current Availability</h4>
                    </div>
                    <div class="col">
                        <a href="/Tests/Results?collectionId=@Model.CollectionId">(get all data)</a>
                    </div>
                </div>
                <div class="row">
                    <canvas id="availabilityChart"></canvas>
                </div>
        </div>
    </div>

    
</div>
    <h2>Documentation</h2>
<p>
    Swagger(Open Api) has been used to produced the documentation for this API.
    The example ids given within the comments for each call should return results for GET Calls if you wish to try them out.
    Post, Put and Patch calls will all return Not Authorized.
    Please note that the API is version controlled and the latest version is V2.
</p>
<a href="https://thewhaddonshowdev.azurewebsites.net/index.html"><img src="/images/TheWhaddonShowApiDocumentationImage.png"></a>
<h2>Code</h2>
<p>All code for this Api Monitor and The Whaddon Show API has been written using C# in .Net by myself.
    The Code demonstrates solid use of Dependency Injection, Generics and the use of recognised coding techniques such as the Builder Pattern for the creation of complex classes.
    It also makes use of centralised class libraries to avoid duplication of code across projects and solutions.</p>
<h4>TheWhaddonShowApi</h4>
<p>
    A second (daemon) api running a range of typical Http requests and recording the outcomes of these to a NoSQL Database (MongoDB).

    An Azure Function then calls this second Api every 67 mins to trigger a test run.
   
    OAUTH2 Authentication has been set up with an AzureAdB2C tenant that also allows daemon access for the API monitor via the Client Credentials UserFlow.
    Extensive use of XML comments has been made to add detail to the Swagger documentation and to give a clear sense of my class library methods at point.
</p>
<h4>MyApiMonitor</h4>
<p>
    MyApiMonitor shows the results o 
</p>
<a href="add further links">Check out the API Code</a> <a href="sfsfsdf">Check out the API Monitoring Code.</a>
<h2>Code Improvements</h2>
<h4>The Whaddon Show Api</h4>
<p>
    The Api make use of generics to standardize Api data access for all types of component being updated (as part of a wider use of generics in the Client App itself to manage syncing).
    A potential improvement would be to extend this further within the Api to reduce the number of controllers to one.
    The effect that this would have on data validation within the controllers needs to be considered fully before embarking on this.
</p>
<h4>My Api Monitor</h4>
<p>Due to time contraints the setup and ordering of tests is currently 'hardcoded' within a TestCollectionSetup_WhaddonShowApi class.</p>
<p>The app has the potential to monitor a wide variety of APIs and if further developed would need database storage of test setups and a basic UI for setup being developed next.</p>


   
 <script>
                document.addEventListener('DOMContentLoaded',(event)=>{

                    var ctx = document.getElementById('resultsChart').getContext('2d');
                    var resultsChart = new Chart(ctx, @Html.Raw(Model.ResultChartConfiguration))

                    var ctx2 = document.getElementById('speedChart').getContext('2d');
                    var speedChart = new Chart(ctx2,@Html.Raw(Model.SpeedChartConfiguration))

                    var ctx3 = document.getElementById('resultsAndSpeedChart').getContext('2d');
                    var resultsAndSpeedChart = new Chart(ctx3, @Html.Raw(Model.ResultAndSpeedChartConfiguration))

                    var ctx4 = document.getElementById('availabilityChart').getContext('2d');
                    var availabilityChart = new Chart(ctx4, @Html.Raw(Model.AvailabilityChartConfiguration))

                })
                
    
</script>
