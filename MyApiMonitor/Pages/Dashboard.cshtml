@page

@using MyApiMonitor.Models;

@model MyApiMonitor.Pages.DashboardModel
@{
 
}
<div class="dashboard-container">

        <div id="current-perfomance-title" class="text-nowrap">
            <h4>Current Performance</h4>
            <p>(over controller testing period)</p>
        </div>
        <div id="percentage-reliability">
           @await Html.PartialAsync("_DashboardBoxPartial",new DashboardBoxModel("Reliability", $@"<div class=""display-3 text-center"">{Model.Reliability}%</div>","Total successes and failures when controller test run every 4 hours."))
        </div>
        <div id="average-speed">
        @await Html.PartialAsync("_DashboardBoxPartial",new DashboardBoxModel("Average Speed",$@"<div class=""display-3 text-center"">{Model.AverageSpeed}ms</div>","The average speed of all tests conducted in period."))
        </div>
        <div id="availability-chart-container" class="grid-container" >
            @await Html.PartialAsync("_DashboardBoxPartial",new DashboardBoxModel("Availability (last 30 minutes)",@"<canvas id=""availabilityChart""></canvas>","Chart shows speed of simple get call every 4 seconds."))
        </div>
       <div id="controller-testing-title" class="text-nowrap">
            <h4>Controller Testing</h4>
            <p>(@Model.DateFrom to @Model.DateTo)</p>
        </div>
        <div id="pagination">
            @Html.Raw(@Model.PaginationHtml)
        </div>        
        <div id="result-chart-container" class="grid-container" >
            @await Html.PartialAsync("_DashboardBoxPartial", new DashboardBoxModel("Reliability",@"<canvas id=""resultsChart""></canvas>","Test Success and Failures for Controller Test Run every 4 hours"))
        </div>
    <div id="speed-chart-container" class="grid-container">
            @await Html.PartialAsync("_DashboardBoxPartial", new DashboardBoxModel("Speed",@"<canvas id=""speedChart""></canvas>","Shows the average time to complete test calls to the api (black line) and the range of times in green."))
        </div>
    <div id="result-speed-chart-container" class="grid-container">
            @await Html.PartialAsync("_DashboardBoxPartial", new DashboardBoxModel("Breakdown By Controller and Test",@"<canvas id=""resultAndSpeedChart""></canvas>","Shows the average time to complete test calls to the api (black line) and the range of times in green."))
        </div>

</div>


<script>
                var resultChart;
                var speedChart;
                var resultAndSpeedChart;
                var availabilityChart;

                const availablityScaleUpdateFrequency = 1000;



                document.addEventListener('DOMContentLoaded',(event)=>{

                    var ctx = document.getElementById('resultsChart').getContext('2d');
                    resultChart = new Chart(ctx, @Html.Raw(Model.ResultChartConfiguration));

                    var ctx2 = document.getElementById('speedChart').getContext('2d');
                    resultChart = new Chart(ctx2, @Html.Raw(Model.SpeedChartConfiguration));

                    var ctx3 = document.getElementById('resultAndSpeedChart').getContext('2d');
                    resultChart = new Chart(ctx3, @Html.Raw(Model.ResultAndSpeedChartConfiguration));

                    var ctx4 = document.getElementById('availabilityChart').getContext('2d');
                    availabilityChart = new Chart(ctx4, @Html.Raw(Model.AvailabilityChartConfiguration));

                })

                setInterval(updateAvailabilityData,5000);
                setInterval(updateAvailabilityScale,availablityScaleUpdateFrequency)

                function updateAvailabilityScale(){
                    let xaxis = availabilityChart.options.scales.x
                    xaxis.min += availablityScaleUpdateFrequency;
                    xaxis.max += availablityScaleUpdateFrequency;

                    availabilityChart.update()
                }

                function updateAvailabilityData(){

                    let currentDataset = availabilityChart.data.datasets[0].data

                    let latestTestDateTime = currentDataset[currentDataset.length - 1].x;

                   

                    fetch('?handler=NewAvailabilityDataPoints&timestamp='+latestTestDateTime)
                    .then((response) => {
                        return response.json();
                    })
                    .then((jsonDataPoints)=>{
                        Array.prototype.forEach.call(jsonDataPoints,function(item,i){

                        availabilityChart.data.datasets[0].data.push(item); //add new data point at end
                        availabilityChart.data.datasets[0].data.splice(0,1); // remove data point from start 
                        })
                    })
                    .then(()=>availabilityChart.update())
                }
                    
                

                function resultChartClickHandler(event){
                    
                    const activeElements = resultChart.getElementsAtEventForMode(event,'nearest', {intersect: true}, true)

                    if (activeElements.length) {
                        const firstElement = activeElements[0];
                        const testDateString = resultChart.data.labels[firstElement.index];

                        window.location.href = '/Results/@Model.CollectionId/' + testDateString + '/' + testDateString
                      }

                }

                function speedChartClickHandler(event){
                    
                     resultChartClickHandler(event)
                }

                function resultAndSpeedChartClickHandler(event){

                        const activeElements = resultChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true)

                        if (activeElements.length) {
                            const firstElement = activeElements[0];
                            const id = resultAndSpeedChart.data.datasets[firstElement.datasetIndex].data[firstElement.index].Id;
                        

                            window.location.href = '/Results/'+id+'/@Model.DateFrom.ToString("o")/@Model.DateTo.ToString("o")';
                        }
                }

                
</script>
